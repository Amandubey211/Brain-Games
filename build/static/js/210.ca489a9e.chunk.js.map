{"version":3,"file":"static/js/210.ca489a9e.chunk.js","mappings":"qlnDAeaA,GAAMC,EAAAA,EAAAA,GAAO,OAE1BD,EAAIE,YAAc,MAqBX,IAAMC,GAASC,EAAAA,EAAAA,IAA+B,SACnDC,EACAC,GAEA,MAAM,KAAEC,EAAA,cAAMC,GAAgB,KAASC,GAASJ,EAE1CK,EAA4BF,EAC9B,CAAEG,QAAS,OAAQC,WAAY,SAAUC,eAAgB,UACzD,CAAC,EAEL,OACEC,EAAAA,EAAAA,KAACd,EAAA,CACCM,MACAS,QAASR,EACTS,MAAO,IACFN,EACHO,WAAY,EACZC,SAAU,MAERT,GAGV,IAEAN,EAAOD,YAAc,UAECE,EAAAA,EAAAA,IAA+B,SACnDC,EACAC,GAEA,MAAM,KAAEC,KAASE,GAASJ,EAC1B,OAAOS,EAAAA,EAAAA,KAACX,EAAA,CAAOI,OAAYD,MAAUa,aAAa,YAAaV,GACjE,IAEOP,YAAc,S,yBCjCPkB,EAAqBC,IAAkBC,EAAAA,EAAAA,GACnD,CAAEC,KAAM,iBAGIC,EAAuBC,IACnCC,EAAAA,EAAAA,IAAoB,W,8BCNTC,GAAUvB,EAAAA,EAAAA,IAAgC,SACrDC,EACAC,GAEA,MAAMI,GAASkB,EAAAA,EAAAA,IAAoB,UAAWvB,IAExC,SACJwB,EAAA,MACAC,EAAA,YACAC,EAAc,aAAY,kBAC1BC,GAAoB,KACjBC,IACDC,EAAAA,EAAAA,IAAiB7B,GAEf8B,EAAeC,EAAAA,SAASC,QAAQR,GAEhCS,EAAYH,EAAaI,OAQ/B,OACEzB,EAAAA,EAAAA,KAACb,EAAAA,EAAOuC,IAAP,CACClC,MACA,aAAW,WACX,mBAAkByB,KACdE,EACJjB,MAAON,EAAO+B,QACdC,WAAWC,EAAAA,EAAAA,IAAG,iBAAkBtC,EAAMqC,WAEtCb,UAAAf,EAAAA,EAAAA,KAACU,EAAA,CAAsBoB,MAAOlC,EAC3BmB,SAAAM,EAAaU,KAAI,CAACC,EAAOC,KACxBjC,SAAAA,EAAAA,KAACM,EAAA,CAECwB,MAAO,CACLd,MAAAiB,EACAC,QArBOC,EAqBWF,EApBxBE,EAAOnB,EAAc,WACrBmB,EAAOnB,EAAc,aAClB,UAmBGC,cACAC,oBACAkB,MAAOZ,EACPa,QAAmB,IAAVJ,EACTK,OAAQL,IAAUT,EAAY,GAG/BT,SAAAiB,GAXIC,GAlBf,IAAmBE,CA+BZ,OAIT,ICrFaI,GAAOjD,EAAAA,EAAAA,IAAsB,SAAcC,EAAOC,GAC7D,MAAM,YAAEyB,EAAA,OAAaiB,EAAA,kBAAQhB,GAAsBX,IAC7CX,EAASe,IAEf,OACEX,EAAAA,EAAAA,KAACb,EAAAA,EAAOuC,IAAP,CACClC,MACA,cAAa0C,EACb,mBAAkBjB,EAClB,gBAAcuB,EAAAA,EAAAA,IAAStB,GACvBhB,MAAON,EAAOuC,QACV5C,EACJqC,WAAWC,EAAAA,EAAAA,IAAG,cAAetC,EAAMqC,YAGzC,ICZO,SAASa,EAAclD,GAC5B,MAAM,OAAE2C,GAAW3B,IACbX,EAASe,IACf,OACEX,EAAAA,EAAAA,KAACb,EAAAA,EAAOuC,IAAP,CACC,cAAaQ,KACT3C,EACJW,MAAON,EAAO8C,UACdd,WAAWC,EAAAA,EAAAA,IAAG,yBAA0BtC,EAAMqC,YAGpD,CCVO,SAASe,EAAWpD,GACzB,MAAM,SAAEqD,EAAA,WAAUC,EAAA,OAAYC,GAAWvD,EACnCwD,EAAUxC,IAEhB,IAAIyC,EAAiC,KAErC,OAAQD,EAAQb,QACd,IAAK,WACHc,GAASC,EAAAA,EAAAA,IAAQL,EAAUG,GAC3B,MACF,IAAK,aACHC,GAASC,EAAAA,EAAAA,IAAQJ,EAAYE,GAC7B,MACF,IAAK,SACHC,GAASC,EAAAA,EAAAA,IAAQH,EAAQC,GAI7B,OAAOC,GAAShD,EAAAA,EAAAA,KAAAkD,EAAAA,SAAA,CAAGnC,SAAAiC,IAAa,IAClC,CC3BO,SAASG,EAAU5D,GACxB,OACES,EAAAA,EAAAA,KAAC,OACCoD,OAAO,eACPC,KAAK,eACLC,YAAY,IACZC,QAAQ,YACR,cAAY,OACZC,OAAO,MACPC,MAAM,SACFlE,EAEJwB,UAAAf,EAAAA,EAAAA,KAAC,QACC0D,SAAS,UACTC,EAAE,qHACFC,SAAS,aAIjB,C,cChBO,SAASC,EAAStE,GACvB,MAAM,OAAE2C,GAAW3B,IACbX,EAASe,IACTmD,EAAkB,aAAX5B,EAAwBiB,OAAY,EACjD,OACEnD,EAAAA,EAAAA,KAAC+D,EAAAA,EAAA,CACCC,GAAIF,EACJ5D,MAAON,EAAOkE,QACVvE,EACJqC,WAAWC,EAAAA,EAAAA,IAAG,oBAAqBtC,EAAMqC,YAG/C,CCbO,IAAMqC,GAAa3E,EAAAA,EAAAA,IAAsB,SAC9CC,EACAC,GAEA,MAAM,SAAEuB,KAAaI,GAAc5B,GAC7B,OAAE2C,EAAA,MAAQlB,GAAUT,IACpBX,EAASe,IACf,OACEX,EAAAA,EAAAA,KAACb,EAAAA,EAAOuC,IAAP,CACClC,MACA,cAAa0C,EACbhC,MAAON,EAAOsE,UACV/C,EACJS,WAAWC,EAAAA,EAAAA,IAAG,sBAAuBtC,EAAMqC,WAE1Cb,SAAAA,GAAYC,EAAQ,GAG3B,I,WCd8BmD,EAAAA,EAAAA,IAAU,CACtC,KAAM,CACJC,gBAAiB,SACjBC,iBAAkB,KAEpB,MAAO,CACLD,gBAAiB,WACjBC,iBAAkB,QAEpB,OAAQ,CACND,gBAAiB,WACjBC,iBAAkB,WAIUF,EAAAA,EAAAA,IAAU,CACxC,KAAM,CACJG,UAAW,gBAEb,OAAQ,CACNA,UAAW,oBApBR,IAwBMC,GAAqBJ,EAAAA,EAAAA,IAAU,CAC1C,KAAM,CAAEK,KAAM,QACd,OAAQ,CAAEA,KAAM,UAGLC,GAAmBN,EAAAA,EAAAA,IAAU,CACxCO,KAAM,CAAEC,mBAAoB,UAC5BC,GAAI,CAAED,mBAAoB,SCrB5B,IAAOE,EAAwBC,IAAqBtE,EAAAA,EAAAA,GAElD,CACAC,KAAA,wBACAsE,aAAA,4GAiBIC,GAAsB1F,EAAAA,EAAAA,IAC1B,CAACC,EAAOC,KACN,MAAM,IAAEyF,EAAA,IAAKC,EAAA,MAAKpD,EAAA,gBAAOqD,EAAA,KAAiBC,KAASzF,GAASJ,EACtD8F,EDcH,SAA0BC,GAC/B,MAAM,MACJxD,EAAQ,EAAC,IACTmD,EAAA,IACAC,EAAA,UACAK,EAAA,aACAC,EAAA,gBACAL,EAAA,KACAC,EAAO,eACLE,EAEEG,EAjER,SAAwB3D,EAAemD,EAAaC,GAClD,OAAwB,KAAfpD,EAAQmD,IAAeC,EAAMD,EACxC,CA+DkBS,CAAe5D,EAAOmD,EAAKC,GAS3C,MAAO,CACLS,KAAM,CACJ,qBAAsBR,EAAkB,QAAK,EAC7C,gBAAiBD,EACjB,gBAAiBD,EACjB,gBAAiBE,OAAkB,EAAYrD,EAC/C,iBAbqB8D,MACvB,GAAa,MAAT9D,EACJ,MAA+B,oBAAjB0D,EACVA,EAAa1D,EAAO2D,GACpBF,CAAA,EASgBK,GAClBR,QAEFK,UACA3D,QAEJ,CC9CqB+D,CAAiB,CAChC/D,QACAmD,MACAC,MACAC,kBACAC,SAIIU,EAAc,CAClBtC,OAAQ,UAFKsB,IAGHiB,aAGZ,OACE/F,EAAAA,EAAAA,KAACb,EAAAA,EAAOuC,IAAP,CACClC,MACAwG,MAAO,CAAEvC,MAAA,GAAAwC,OAAUZ,EAASI,QAAA,QAAe9F,EAAKqG,UAC5CX,EAASM,QACThG,EACJO,MAAO4F,GACT,IA4DOI,GAAW5G,EAAAA,EAAAA,IAAiC,CAACC,EAAOC,KA3HjE,IAAA2G,EA4HE,MAAM,MACJrE,EAAA,IACAmD,EAAM,EAAC,IACPC,EAAM,IAAG,UACTkB,EAAA,WACAC,EAAA,SACAtF,EACAV,aAAciG,EAAA,gBACdnB,EACA,aAAcoB,EACd,kBAAmBC,EACnB,iBAAkBC,EAAA,MAClBC,EAAA,KACAtB,KACGzF,IACDyB,EAAAA,EAAAA,IAAiB7B,GAEfK,GAASkB,EAAAA,EAAAA,IAAoB,WAAYvB,GAEzCc,EACJ,MAAAiG,EAAAA,EACC,OAAAH,EAAAvG,EAAO+G,YAAP,EAAAR,EAAc9F,aAEXuG,EAAkB,CAAEC,UAAA,GAAAZ,OAAcxB,EAAA,wBAYlCqC,EAA0B,KAPP3B,GAAmBiB,GAEGC,GAMlBO,KACvBzB,GAAmB,CACrB4B,SAAU,WACVC,WAAY,OACZC,SAAU,MACVJ,UAAA,GAAAZ,OAAc1B,EAAA,2CAIZuB,EAAiC,CACrCoB,SAAU,SACVH,SAAU,cACPnH,EAAO+G,OAGZ,OACE3G,EAAAA,EAAAA,KAACb,EAAAA,EAAOuC,IAAP,CACClC,MACAa,eACAH,MAAO4F,KACHnG,EAEJoB,UAAAoG,EAAAA,EAAAA,MAACtC,EAAA,CAAuB/C,MAAOlC,EAC7BmB,SAAA,EAAAf,EAAAA,EAAAA,KAACgF,EAAA,CACC,aAAYuB,EACZ,kBAAiBC,EACjB,iBAAgBC,EAChBxB,MACAC,MACApD,QACAqD,kBACA2B,MACAzG,eACAqG,QACAtB,SAEDrE,MAEL,IAIJmF,EAAS9G,YAAc,WCzLvB,MAyCA,EAzCkBgI,IAAuC,IAAtC,SAACC,EAAQ,MAAEjF,EAAK,MAAEkF,EAAK,MAAEtG,GAAOoG,EACjD,MAAM,WAAEG,EAAU,cAAEC,GCTf,WAA6C,IAA3BjI,EAAAkI,UAAAhG,OAAA,QAAAiG,IAAAD,UAAA,GAAAA,UAAA,GAAuB,CAAC,EAC/C,MAAM,MAAEzG,EAAQ,EAAC,MAAEoB,GAAU7C,GAEtBgI,EAAYC,IAAiBG,EAAAA,EAAAA,UAAS3G,GAK7C,MAAO,CACLuG,aACAC,gBACAI,kBALwBL,GADO,kBAAVnF,EAAqBA,EAAQ,EAAI,GAOtDyF,aAAa1F,GACJA,IAASoF,EAElBO,eAAe3F,GACNA,EAAOoF,EAEhBQ,iBAAiB5F,GACRA,EAAOoF,EAEhBS,UAAU7F,GACJA,EAAOoF,EAAmB,WAC1BpF,EAAOoF,EAAmB,aACvB,SAETU,QAAAA,GACET,GAAerF,GACW,kBAAVC,EAAqB8F,KAAKjD,IAAI7C,EAAOD,EAAO,GAAKA,EAAO,GAE1E,EACAgG,YAAAA,GACEX,GAAerF,GAAS+F,KAAKhD,IAAI,EAAG/C,EAAO,IAC7C,EAEJ,CD1BwCiG,CAAS,CAC7CpH,MAAOA,KAETqH,EAAAA,EAAAA,YAAU,KACRb,EAAcxG,EAAM,GACnB,CAACA,IAEJ,MACMsH,EAAmBf,GADbD,EAAM7F,OAAS,GACkB,IAE7C,OACE8G,EAAAA,EAAAA,KAAA,OAAAxH,UACEyH,EAAAA,EAAAA,MAACtJ,EAAG,CAAC6H,SAAS,WAAUhG,SAAA,EACtBwH,EAAAA,EAAAA,KAAC1H,EAAO,CAACpB,KAAK,KAAKwB,YAAaoG,EAAUoB,YAAY,SAASzH,MAAOuG,EAAYmB,IAAI,IAAG3H,SACtFuG,EAAMvF,KAAI,CAACI,EAAMwG,KAChBJ,EAAAA,EAAAA,KAAChG,EAAI,CAASmG,IAAI,IAAG3H,UACnBwH,EAAAA,EAAAA,KAAC9F,EAAa,CAACmG,GAAG,QAAO7H,UACvBwH,EAAAA,EAAAA,KAAC5F,EAAU,CACTC,UAAU2F,EAAAA,EAAAA,KAAC1E,EAAQ,IACnBhB,YAAY0F,EAAAA,EAAAA,KAACtE,EAAU,IACvBnB,QAAQyF,EAAAA,EAAAA,KAACtE,EAAU,SALd0E,QAWfJ,EAAAA,EAAAA,KAACrC,EAAQ,CACPpE,MAAOwG,EACPvB,SAAS,WACT0B,YAAY,SACZjF,OAAO,MACPC,MAAM,OACNoF,IAAI,OACJC,QAAS,QAGT,E,iCExCV,MAmSA,EAnSiBC,KAAO,IAADC,EAAAC,EAAAC,EACrB,MAAMC,GAAUC,EAAAA,EAAAA,OACV,KAAEC,EAAI,YAAEC,EAAW,iBAAEC,IAAqBC,EAAAA,EAAAA,YAAWC,EAAAA,IACrD,UAAEC,IAAcF,EAAAA,EAAAA,YAAWG,EAAAA,IAC3B,WAAEC,IAAeJ,EAAAA,EAAAA,YAAWK,EAAAA,IAE3BC,EAASC,IAAcpC,EAAAA,EAAAA,aACvBqC,EAAiBC,IAAsBtC,EAAAA,EAAAA,UAAS,IAChDuC,EAAOC,IAAYxC,EAAAA,EAAAA,UAAS,IAC5ByC,EAAOC,IAAY1C,EAAAA,EAAAA,WAAS,IAC5B2C,EAAOC,IAAY5C,EAAAA,EAAAA,WAAS,IAEnCU,EAAAA,EAAAA,YAAU,KACmB,IAADmC,EAAAC,EAAtBf,EAAUjI,OAAS,EACrBsI,EACEL,GACEgB,EAAgB,CACY,QADZF,EACdd,EAAUM,UAAgB,IAAAQ,OAAA,EAA1BA,EAA4BG,kBACC,QAA7BF,EAAGf,EAAUM,UAAgB,IAAAS,OAAA,EAA1BA,EAA4BG,sBAIrCC,EAAAA,GAAMC,MAAM,oBACZ3B,EAAQ,gBACV,GACC,CAACa,IAEJ,MAAMU,EAAmBK,GAChBA,EAAWC,MAAK,IAAM9C,KAAK+C,SAAW,KAoC/C,OACEzC,EAAAA,EAAAA,MAAA,OAAAzH,SAAA,EACEwH,EAAAA,EAAAA,KAAC2C,EAAAA,GAAO,KACR1C,EAAAA,EAAAA,MAAA,OAAK5G,UAAU,MAAKb,SAAA,EAClByH,EAAAA,EAAAA,MAAA,OAAK5G,UAAU,6DAA4Db,SAAA,EACzEwH,EAAAA,EAAAA,KAAA,OAAK3G,UAAU,kBAAiBb,UAC9BwH,EAAAA,EAAAA,KAAC4C,EAAAA,GAAO,CAACvG,GAAG,IAAIhD,UAAU,kCAAiCb,UACzDyH,EAAAA,EAAAA,MAAA,OAAK5G,UAAU,yDAAwDb,SAAA,EACrEyH,EAAAA,EAAAA,MAAA,KAAAzH,SAAA,EACEwH,EAAAA,EAAAA,KAAA,KAAG3G,UAAU,SAAQb,SAAC,MAAK,WAI7ByH,EAAAA,EAAAA,MAAA,KAAAzH,SAAA,EACEwH,EAAAA,EAAAA,KAAA,KAAG3G,UAAU,SAAQb,SAAC,MAAK,kBAMnCwH,EAAAA,EAAAA,KAAA,OAAK3G,UAAU,uDAAsDb,SAClE2I,EAAUjI,OAAS,IAClB8G,EAAAA,EAAAA,KAAA6C,EAAAA,SAAA,KAEA5C,EAAAA,EAAAA,MAAA,OAAAzH,SAAA,EACEwH,EAAAA,EAAAA,KAAA,OAAK3G,UAAU,oEAAmEb,UAChFwH,EAAAA,EAAAA,KAAA,OAAK3G,UAAU,iBAAgBb,UAC7BwH,EAAAA,EAAAA,KAAC8C,EAAS,CACR/D,MAAOoC,GAAaA,EACpB1I,MAAOgJ,EACP5H,MAAgB,OAATsH,QAAS,IAATA,OAAS,EAATA,EAAWjI,cAKxB8G,EAAAA,EAAAA,KAAA,OAAK3G,UAAU,gBAAeb,UAC5BwH,EAAAA,EAAAA,KAAA,OAAK3G,UAAU,yEAAwEb,UAWrFwH,EAAAA,EAAAA,KAAC8C,EACC,CACA/D,MAAOoC,GAAaA,EACpB1I,MAAOgJ,EACP5H,MAAgB,OAATsH,QAAS,IAATA,OAAS,EAATA,EAAWjI,sBAUhC8G,EAAAA,EAAAA,KAAA,OAAK3G,UAAU,qBAAoBb,UACjCwH,EAAAA,EAAAA,KAAA,OAAK3G,UAAU,yDAAwDb,UACrEwH,EAAAA,EAAAA,KAAA,UAAQ3G,UAAU,aAAawD,KAAK,SAASkG,UAAQ,EAAAvK,UACnDwH,EAAAA,EAAAA,KAAA,KAAG3G,UAAU,OAAMb,SAA4B,QAA5BiI,EAAEU,EAAUM,UAAgB,IAAAhB,OAAA,EAA1BA,EAA4BuC,kBAKvDhD,EAAAA,EAAAA,KAAA,OAAAxH,UACEyH,EAAAA,EAAAA,MAAA,OAAK5G,UAAU,UAASb,SAAA,EACtBwH,EAAAA,EAAAA,KAAA,OAAK3G,UAAU,kCAAiCb,UAC9CyH,EAAAA,EAAAA,MAAA,OAAK5G,UAAU,qEAAoEb,SAAA,EACjFwH,EAAAA,EAAAA,KAAA,UAAQ3G,UAAU,aAAawD,KAAK,SAASkG,UAAQ,EAAAvK,UACnDyH,EAAAA,EAAAA,MAAA,KAAG5G,UAAU,OAAMb,SAAA,CAAC,WACiB,QAA3BkI,EAACS,EAAUM,UAAgB,IAAAf,OAAA,EAA1BA,EAA4BsC,cAGvCjB,GAkBA/B,EAAAA,EAAAA,KAACiD,EAAAA,EAAQ,CAAChI,OAAO,QAAQiI,cAAeC,KAjBxCnD,EAAAA,EAAAA,KAAA,OAAAxH,SACIqJ,GAOA7B,EAAAA,EAAAA,KAAA6C,EAAAA,SAAA,CAAArK,UACEwH,EAAAA,EAAAA,KAACiD,EAAAA,EAAQ,CACPhI,OAAO,QACPiI,cAAeE,OATnBpD,EAAAA,EAAAA,KAAA6C,EAAAA,SAAA,CAAArK,UACEwH,EAAAA,EAAAA,KAAA,OAAAxH,UACEwH,EAAAA,EAAAA,KAAA,OAAKvC,MAAO,CAAExC,OAAQ,SAAWoI,IAAI,wBAe/CpD,EAAAA,EAAAA,MAAA,MAAI5G,UAAU,cAAab,SAAA,CAAC,WACjB,IACRsI,GACCb,EAAAA,EAAAA,MAAA,KAAG5G,UAAU,WAAUb,SAAA,CAAC,IAAEsI,EAAKwC,cAAc,QAE7CtD,EAAAA,EAAAA,KAAA,KAAG3G,UAAU,UAASb,SAAC,aAG3ByH,EAAAA,EAAAA,MAAA,UACE5G,UAAU,YACVkK,QAASA,KACPxC,EAAY,IACZC,EAAiB,MAEjBJ,EAAQ,eAAe,EAEzB/D,KAAK,SAAQrE,SAAA,CAEZ,KACDyH,EAAAA,EAAAA,MAAA,OAAK5G,UAAU,yDAAwDb,SAAA,EACrEwH,EAAAA,EAAAA,KAACwD,EAAAA,GAAkB,IAAG,KAACxD,EAAAA,EAAAA,KAAA,KAAAxH,SAAG,gBAEpB,UAIdyH,EAAAA,EAAAA,MAAA,OAAK5G,UAAU,+BAA8Bb,SAAA,EAC3CwH,EAAAA,EAAAA,KAAA,OAAK3G,UAAU,4CAA2Cb,UACxDyH,EAAAA,EAAAA,MAAA,OAAK5G,UAAU,4DAA2Db,SAAA,EACxEyH,EAAAA,EAAAA,MAAA,MAAAzH,SAAA,EACEwH,EAAAA,EAAAA,KAAA,KAAG3G,UAAU,eAAcb,SAAC,MAC3BiJ,EAAkB,EAAE,QAEvBxB,EAAAA,EAAAA,MAAA,OAAAzH,SAAA,EACEyH,EAAAA,EAAAA,MAAA,MAAAzH,SAAA,CAAI,IAA4B,QAA3BmI,EAACQ,EAAUM,UAAgB,IAAAd,OAAA,EAA1BA,EAA4B8C,YAAe,aAIvDzD,EAAAA,EAAAA,KAAA,OAAK3G,UAAU,+EAA8Eb,UAC3FyH,EAAAA,EAAAA,MAAA,OAAK5G,UAAU,8DAA6Db,SAAA,CACzE,KACDyH,EAAAA,EAAAA,MAAA,OAAK5G,UAAU,eAAcb,SAAA,EAC3ByH,EAAAA,EAAAA,MAAA,QAAAzH,SAAA,EACEwH,EAAAA,EAAAA,KAAA,KAAG3G,UAAU,aAAYb,SAAC,MAAK,SAAO,QAExCyH,EAAAA,EAAAA,MAAA,QAAAzH,SAAA,CACG,KACDyH,EAAAA,EAAAA,MAAA,KAAAzH,SAAA,CAAImJ,EAAM,mBAKlB3B,EAAAA,EAAAA,KAAA,OAAK3G,UAAU,cAAab,UAC1ByH,EAAAA,EAAAA,MAAA,OAAK5G,UAAU,+CAA8Cb,SAAA,EAC3DyH,EAAAA,EAAAA,MAAA,QAAAzH,SAAA,EACEwH,EAAAA,EAAAA,KAAA,KAAG3G,UAAU,WAAUb,SAAC,MAAK,SAAO,QAEtCyH,EAAAA,EAAAA,MAAA,QAAAzH,SAAA,CACG,KACDyH,EAAAA,EAAAA,MAAA,KAAAzH,SAAA,CAAG,IAAEmJ,EAAM,gBAIjB3B,EAAAA,EAAAA,KAAA,OAAK3G,UAAU,4DAA2Db,UACxEwH,EAAAA,EAAAA,KAAA,OAAK3G,UAAU,6CAA4Cb,SACvDuJ,GAqBA/B,EAAAA,EAAAA,KAACiD,EAAAA,EAAQ,CAAChI,OAAO,QAAQiI,cAAeC,KApBxCnD,EAAAA,EAAAA,KAAA,OAAAxH,SACIqJ,GAUA7B,EAAAA,EAAAA,KAAA6C,EAAAA,SAAA,CAAArK,UACEwH,EAAAA,EAAAA,KAACiD,EAAAA,EAAQ,CACPhI,OAAO,QACPiI,cAAeE,OAZnBpD,EAAAA,EAAAA,KAAA6C,EAAAA,SAAA,CAAArK,UACEwH,EAAAA,EAAAA,KAAA,OAAAxH,UACEwH,EAAAA,EAAAA,KAAA,OACE3G,UAAU,8BACVgK,IAAI,4BAmBpBrD,EAAAA,EAAAA,KAAA,OAAK3G,UAAU,qFAAoFb,SACzF,OAAP+I,QAAO,IAAPA,OAAO,EAAPA,EAAS/H,KAAI,CAACkK,EAAQtD,KAEnBJ,EAAAA,EAAAA,KAAA,OAAauD,QAASA,IAlOnBI,WAAmB,IAADC,EACrC,IAAKC,EACH,OAAOvB,EAAAA,GAAMC,MAAM,sBAErBuB,QAAQC,IAAItC,GAGRoC,UAFgD,QAAhCD,EAAMzC,EAAUM,UAAgB,IAAAmC,OAAA,EAA1BA,EAA4BxB,iBAGpDJ,GAAS,GACTgC,YAAW,KACThC,GAAS,EAAM,GACd,KACHJ,EAASD,EAAQ,GAEbF,GAA2B,OAATN,QAAS,IAATA,OAAS,EAATA,EAAWjI,QAAS,EACxCwI,EAAmBD,EAAkB,IAErCJ,EAAWM,EAAQ,GACnBf,EAAQ,gBAGVkB,GAAS,GACTkC,YAAW,KACTlC,GAAS,EAAM,GACd,KACCL,GAA2B,OAATN,QAAS,IAATA,OAAS,EAATA,EAAWjI,QAAS,EACxCwI,EAAmBD,EAAkB,IAErCJ,EAAWM,GACXf,EAAQ,cAEZ,EAmM4CqD,CAAaP,GAAQlL,UAC/CwH,EAAAA,EAAAA,KAAA,UACEvC,MAAO,CACLyG,OAAQ,UACRhJ,MAAO,QACPD,OAAQ,OAERkJ,WAAY,UAEd9K,UAAU,YACVwD,KAAK,SAAQrE,UAEbwH,EAAAA,EAAAA,KAAA,KAAAxH,SAAIkL,OAZEtD,QAmBhBH,EAAAA,EAAAA,MAAA,OAAK5G,UAAU,kEAAiEb,SAAA,EAC9EwH,EAAAA,EAAAA,KAACoE,EAAAA,IAAM,CAAC/K,UAAU,UAClB4G,EAAAA,EAAAA,MAAA,KAAAzH,SAAA,CACG,KACDwH,EAAAA,EAAAA,KAAA,KAAG3G,UAAU,UAASb,SAAC,cAAa,sDAQ5C,C","sources":["../node_modules/@chakra-ui/layout/src/box.tsx","../node_modules/@chakra-ui/stepper/src/step-context.tsx","../node_modules/@chakra-ui/stepper/src/stepper.tsx","../node_modules/@chakra-ui/stepper/src/step.tsx","../node_modules/@chakra-ui/stepper/src/step-indicator.tsx","../node_modules/@chakra-ui/stepper/src/step-status.tsx","../node_modules/@chakra-ui/stepper/src/icons.tsx","../node_modules/@chakra-ui/stepper/src/step-icon.tsx","../node_modules/@chakra-ui/stepper/src/step-number.tsx","../node_modules/@chakra-ui/progress/src/progress.utils.tsx","../node_modules/@chakra-ui/progress/src/progress.tsx","Components/Stepper/Stepperss.js","../node_modules/@chakra-ui/stepper/src/use-steps.ts","Pages/QuizPage.js"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface BoxProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * Box is the most abstract component on top of which other chakra\n * components are built. It renders a `div` element by default.\n *\n * @see Docs https://chakra-ui.com/box\n */\nexport const Box = chakra(\"div\")\n\nBox.displayName = \"Box\"\n\n/**\n * As a constraint, you can't pass size related props\n * Only `size` would be allowed\n */\ntype Omitted = \"size\" | \"boxSize\" | \"width\" | \"height\" | \"w\" | \"h\"\n\nexport interface SquareProps extends Omit<BoxProps, Omitted> {\n  /**\n   * The size (width and height) of the square\n   */\n  size?: BoxProps[\"width\"]\n  /**\n   * If `true`, the content will be centered in the square\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\nexport const Square = forwardRef<SquareProps, \"div\">(function Square(\n  props,\n  ref,\n) {\n  const { size, centerContent = true, ...rest } = props\n\n  const styles: SystemStyleObject = centerContent\n    ? { display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }\n    : {}\n\n  return (\n    <Box\n      ref={ref}\n      boxSize={size}\n      __css={{\n        ...styles,\n        flexShrink: 0,\n        flexGrow: 0,\n      }}\n      {...rest}\n    />\n  )\n})\n\nSquare.displayName = \"Square\"\n\nexport const Circle = forwardRef<SquareProps, \"div\">(function Circle(\n  props,\n  ref,\n) {\n  const { size, ...rest } = props\n  return <Square size={size} ref={ref} borderRadius=\"9999px\" {...rest} />\n})\n\nCircle.displayName = \"Circle\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { createStylesContext } from \"@chakra-ui/system\"\n\nexport type StepStatusType = \"active\" | \"complete\" | \"incomplete\"\n\nexport type Orientation = \"horizontal\" | \"vertical\"\n\nexport interface StepContext {\n  /**\n   * The status of the step\n   * @type \"active\" | \"complete\" | \"incomplete\"\n   */\n  status: StepStatusType\n  /**\n   * The total number of steps\n   */\n  count: number\n  /**\n   * The index of the step\n   */\n  index: number\n  /**\n   * The orientation of the stepper\n   */\n  orientation: Orientation\n  /**\n   * Whether the step is the last step\n   */\n  isLast: boolean\n  /**\n   * Whether the step is the first step\n   */\n  isFirst: boolean\n  /**\n   * Whether to show or not the last separator while in vertical orientation\n   */\n  showLastSeparator?: boolean\n}\n\nexport const [StepContextProvider, useStepContext] = createContext<StepContext>(\n  { name: \"StepContext\" },\n)\n\nexport const [StepperStylesProvider, useStepperStyles] =\n  createStylesContext(\"Stepper\")\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  HTMLChakraProps,\n  ThemingProps,\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { Children } from \"react\"\nimport {\n  Orientation,\n  StepContextProvider,\n  StepStatusType,\n  StepperStylesProvider,\n} from \"./step-context\"\n\nexport interface StepperProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Stepper\"> {\n  /**\n   * The active step index\n   */\n  index: number\n  /**\n   * The orientation of the stepper\n   * @default horizontal\n   */\n  orientation?: Orientation\n  /**\n   * Whether to show or not the last separator while in vertical orientation\n   */\n  showLastSeparator?: boolean\n  /**\n   */\n  children: React.ReactNode\n}\n\nexport const Stepper = forwardRef<StepperProps, \"div\">(function Stepper(\n  props: StepperProps,\n  ref,\n) {\n  const styles = useMultiStyleConfig(\"Stepper\", props)\n\n  const {\n    children,\n    index,\n    orientation = \"horizontal\",\n    showLastSeparator = false,\n    ...restProps\n  } = omitThemingProps(props)\n\n  const stepElements = Children.toArray(children)\n\n  const stepCount = stepElements.length\n\n  function getStatus(step: number): StepStatusType {\n    if (step < index) return \"complete\"\n    if (step > index) return \"incomplete\"\n    return \"active\"\n  }\n\n  return (\n    <chakra.div\n      ref={ref}\n      aria-label=\"Progress\"\n      data-orientation={orientation}\n      {...restProps}\n      __css={styles.stepper}\n      className={cx(\"chakra-stepper\", props.className)}\n    >\n      <StepperStylesProvider value={styles}>\n        {stepElements.map((child, index) => (\n          <StepContextProvider\n            key={index}\n            value={{\n              index,\n              status: getStatus(index),\n              orientation,\n              showLastSeparator,\n              count: stepCount,\n              isFirst: index === 0,\n              isLast: index === stepCount - 1,\n            }}\n          >\n            {child}\n          </StepContextProvider>\n        ))}\n      </StepperStylesProvider>\n    </chakra.div>\n  )\n})\n","import { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { HTMLChakraProps, chakra, forwardRef } from \"@chakra-ui/system\"\nimport { useStepContext, useStepperStyles } from \"./step-context\"\n\nexport interface StepProps extends HTMLChakraProps<\"div\"> {}\n\nexport const Step = forwardRef<{}, \"div\">(function Step(props, ref) {\n  const { orientation, status, showLastSeparator } = useStepContext()\n  const styles = useStepperStyles()\n\n  return (\n    <chakra.div\n      ref={ref}\n      data-status={status}\n      data-orientation={orientation}\n      data-stretch={dataAttr(showLastSeparator)}\n      __css={styles.step}\n      {...props}\n      className={cx(\"chakra-step\", props.className)}\n    />\n  )\n})\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport { HTMLChakraProps, chakra } from \"@chakra-ui/system\"\nimport { useStepContext, useStepperStyles } from \"./step-context\"\nimport { StepIcon } from \"./step-icon\"\nimport { StepNumber } from \"./step-number\"\nimport { StepStatus } from \"./step-status\"\n\nexport interface StepIndicatorProps extends HTMLChakraProps<\"div\"> {}\n\nexport function StepIndicator(props: StepIndicatorProps) {\n  const { status } = useStepContext()\n  const styles = useStepperStyles()\n  return (\n    <chakra.div\n      data-status={status}\n      {...props}\n      __css={styles.indicator}\n      className={cx(\"chakra-step__indicator\", props.className)}\n    />\n  )\n}\n\nexport function StepIndicatorContent() {\n  return (\n    <StepStatus\n      complete={<StepIcon />}\n      incomplete={<StepNumber />}\n      active={<StepNumber />}\n    />\n  )\n}\n","import { runIfFn } from \"@chakra-ui/shared-utils\"\nimport { StepContext, StepStatusType, useStepContext } from \"./step-context\"\n\ntype MaybeRenderProp =\n  | React.ReactNode\n  | ((props: StepContext) => React.ReactNode)\n\nexport interface StepStatusProps\n  extends Partial<Record<StepStatusType, MaybeRenderProp>> {}\n\nexport function StepStatus(props: StepStatusProps) {\n  const { complete, incomplete, active } = props\n  const context = useStepContext()\n\n  let render: React.ReactNode | null = null\n\n  switch (context.status) {\n    case \"complete\":\n      render = runIfFn(complete, context)\n      break\n    case \"incomplete\":\n      render = runIfFn(incomplete, context)\n      break\n    case \"active\":\n      render = runIfFn(active, context)\n      break\n  }\n\n  return render ? <>{render}</> : null\n}\n","import { ComponentProps } from \"react\"\n\nexport function CheckIcon(props: ComponentProps<\"svg\">) {\n  return (\n    <svg\n      stroke=\"currentColor\"\n      fill=\"currentColor\"\n      strokeWidth=\"0\"\n      viewBox=\"0 0 20 20\"\n      aria-hidden=\"true\"\n      height=\"1em\"\n      width=\"1em\"\n      {...props}\n    >\n      <path\n        fillRule=\"evenodd\"\n        d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"\n        clipRule=\"evenodd\"\n      />\n    </svg>\n  )\n}\n","import { Icon, IconProps } from \"@chakra-ui/icon\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { CheckIcon } from \"./icons\"\nimport { useStepContext, useStepperStyles } from \"./step-context\"\n\nexport function StepIcon(props: IconProps) {\n  const { status } = useStepContext()\n  const styles = useStepperStyles()\n  const icon = status === \"complete\" ? CheckIcon : undefined\n  return (\n    <Icon\n      as={icon}\n      __css={styles.icon}\n      {...props}\n      className={cx(\"chakra-step__icon\", props.className)}\n    />\n  )\n}\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport { chakra, forwardRef } from \"@chakra-ui/system\"\nimport { useStepContext, useStepperStyles } from \"./step-context\"\n\nexport const StepNumber = forwardRef<{}, \"div\">(function StepNumber(\n  props,\n  ref,\n) {\n  const { children, ...restProps } = props\n  const { status, index } = useStepContext()\n  const styles = useStepperStyles()\n  return (\n    <chakra.div\n      ref={ref}\n      data-status={status}\n      __css={styles.number}\n      {...restProps}\n      className={cx(\"chakra-step__number\", props.className)}\n    >\n      {children || index + 1}\n    </chakra.div>\n  )\n})\n","import { keyframes } from \"@chakra-ui/system\"\n\nfunction valueToPercent(value: number, min: number, max: number) {\n  return ((value - min) * 100) / (max - min)\n}\n\ntype Keyframe = ReturnType<typeof keyframes>\n\nexport const spin: Keyframe = keyframes({\n  \"0%\": {\n    strokeDasharray: \"1, 400\",\n    strokeDashoffset: \"0\",\n  },\n  \"50%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-100\",\n  },\n  \"100%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-260\",\n  },\n})\n\nexport const rotate: Keyframe = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\",\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\",\n  },\n})\n\nexport const progress: Keyframe = keyframes({\n  \"0%\": { left: \"-40%\" },\n  \"100%\": { left: \"100%\" },\n})\n\nexport const stripe: Keyframe = keyframes({\n  from: { backgroundPosition: \"1rem 0\" },\n  to: { backgroundPosition: \"0 0\" },\n})\n\nexport interface GetProgressPropsOptions {\n  value?: number\n  min: number\n  max: number\n  valueText?: string\n  getValueText?(value: number, percent: number): string\n  isIndeterminate?: boolean\n  role?: React.AriaRole\n}\n\n/**\n * Get the common `aria-*` attributes for both the linear and circular\n * progress components.\n */\nexport function getProgressProps(options: GetProgressPropsOptions) {\n  const {\n    value = 0,\n    min,\n    max,\n    valueText,\n    getValueText,\n    isIndeterminate,\n    role = \"progressbar\",\n  } = options\n\n  const percent = valueToPercent(value, min, max)\n\n  const getAriaValueText = () => {\n    if (value == null) return undefined\n    return typeof getValueText === \"function\"\n      ? getValueText(value, percent)\n      : valueText\n  }\n\n  return {\n    bind: {\n      \"data-indeterminate\": isIndeterminate ? \"\" : undefined,\n      \"aria-valuemax\": max,\n      \"aria-valuemin\": min,\n      \"aria-valuenow\": isIndeterminate ? undefined : value,\n      \"aria-valuetext\": getAriaValueText(),\n      role,\n    },\n    percent,\n    value,\n  }\n}\n","import {\n  chakra,\n  Interpolation,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n  forwardRef,\n} from \"@chakra-ui/system\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport {\n  getProgressProps,\n  GetProgressPropsOptions,\n  progress,\n  stripe,\n} from \"./progress.utils\"\n\nconst [ProgressStylesProvider, useProgressStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `ProgressStylesContext`,\n  errorMessage: `useProgressStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Progress />\" `,\n})\n\nexport { useProgressStyles }\n\nexport interface ProgressFilledTrackProps\n  extends HTMLChakraProps<\"div\">,\n    GetProgressPropsOptions {}\n\n/**\n * ProgressFilledTrack (Linear)\n *\n * The progress component that visually indicates the current level of the progress bar.\n * It applies `background-color` and changes its width.\n *\n * @see Docs https://chakra-ui.com/progress\n */\nconst ProgressFilledTrack = forwardRef<ProgressFilledTrackProps, \"div\">(\n  (props, ref) => {\n    const { min, max, value, isIndeterminate, role, ...rest } = props\n    const progress = getProgressProps({\n      value,\n      min,\n      max,\n      isIndeterminate,\n      role,\n    })\n\n    const styles = useProgressStyles()\n    const trackStyles = {\n      height: \"100%\",\n      ...styles.filledTrack,\n    }\n\n    return (\n      <chakra.div\n        ref={ref}\n        style={{ width: `${progress.percent}%`, ...rest.style }}\n        {...progress.bind}\n        {...rest}\n        __css={trackStyles}\n      />\n    )\n  },\n)\n\nexport interface ProgressTrackProps extends HTMLChakraProps<\"div\"> {}\n\ninterface ProgressOptions {\n  /**\n   * The `value` of the progress indicator.\n   * If `undefined` the progress bar will be in `indeterminate` state\n   */\n  value?: number\n  /**\n   * The minimum value of the progress\n   * @default 0\n   */\n  min?: number\n  /**\n   * The maximum value of the progress\n   * @default 100\n   */\n  max?: number\n  /**\n   * If `true`, the progress bar will show stripe\n   *\n   * @default false\n   */\n  hasStripe?: boolean\n  /**\n   * If `true`, and hasStripe is `true`, the stripes will be animated\n   *\n   * @default false\n   */\n  isAnimated?: boolean\n  /**\n   * If `true`, the progress will be indeterminate and the `value`\n   * prop will be ignored\n   *\n   * @default false\n   */\n  isIndeterminate?: boolean\n}\n\nexport interface ProgressProps\n  extends ProgressOptions,\n    ThemingProps<\"Progress\">,\n    HTMLChakraProps<\"div\"> {}\n\n/**\n * Progress (Linear)\n *\n * Progress is used to display the progress status for a task that takes a long\n * time or consists of several steps.\n *\n * It includes accessible attributes to help assistive technologies understand\n * and speak the progress values.\n *\n * @see Docs https://chakra-ui.com/progress\n */\nexport const Progress = forwardRef<ProgressProps, \"div\">((props, ref) => {\n  const {\n    value,\n    min = 0,\n    max = 100,\n    hasStripe,\n    isAnimated,\n    children,\n    borderRadius: propBorderRadius,\n    isIndeterminate,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-valuetext\": ariaValueText,\n    title,\n    role,\n    ...rest\n  } = omitThemingProps(props)\n\n  const styles = useMultiStyleConfig(\"Progress\", props)\n\n  const borderRadius =\n    propBorderRadius ??\n    (styles.track?.borderRadius as string | number | undefined)\n\n  const stripeAnimation = { animation: `${stripe} 1s linear infinite` }\n\n  /**\n   * We should not use stripe if it is `indeterminate`\n   */\n  const shouldAddStripe = !isIndeterminate && hasStripe\n\n  const shouldAnimateStripe = shouldAddStripe && isAnimated\n\n  /**\n   * Generate styles for stripe and stripe animation\n   */\n  const css: Interpolation<any> = {\n    ...(shouldAnimateStripe && stripeAnimation),\n    ...(isIndeterminate && {\n      position: \"absolute\",\n      willChange: \"left\",\n      minWidth: \"50%\",\n      animation: `${progress} 1s ease infinite normal none running`,\n    }),\n  }\n\n  const trackStyles: SystemStyleObject = {\n    overflow: \"hidden\",\n    position: \"relative\",\n    ...styles.track,\n  }\n\n  return (\n    <chakra.div\n      ref={ref}\n      borderRadius={borderRadius}\n      __css={trackStyles}\n      {...rest}\n    >\n      <ProgressStylesProvider value={styles}>\n        <ProgressFilledTrack\n          aria-label={ariaLabel}\n          aria-labelledby={ariaLabelledBy}\n          aria-valuetext={ariaValueText}\n          min={min}\n          max={max}\n          value={value}\n          isIndeterminate={isIndeterminate}\n          css={css}\n          borderRadius={borderRadius}\n          title={title}\n          role={role}\n        />\n        {children}\n      </ProgressStylesProvider>\n    </chakra.div>\n  )\n})\n\nProgress.displayName = \"Progress\"\n","import {\r\n  Box,\r\n  Progress,\r\n  Step,\r\n  StepDescription,\r\n  StepIcon,\r\n  StepIndicator,\r\n  StepNumber,\r\n  StepSeparator,\r\n  StepStatus,\r\n  StepTitle,\r\n  Stepper,\r\n  useSteps,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport React, { useEffect } from \"react\";\r\n\r\nconst Stepperss = ({oriented, count, steps, index }) => {\r\n  const { activeStep, setActiveStep } = useSteps({\r\n    index: index,\r\n  });\r\n  useEffect(() => {\r\n    setActiveStep(index);\r\n  }, [index]);\r\n\r\n  const max = steps.length - 1;\r\n  const progressPercent = (activeStep / max) * 100;\r\n\r\n  return (\r\n    <div>\r\n      <Box position=\"relative\">\r\n        <Stepper size=\"sm\" orientation={oriented} colorScheme=\"yellow\" index={activeStep} gap=\"1\">\r\n          {steps.map((step, i) => (\r\n            <Step key={i} gap=\"0\">\r\n              <StepIndicator bg=\"white\">\r\n                <StepStatus\r\n                  complete={<StepIcon />}\r\n                  incomplete={<StepNumber />}\r\n                  active={<StepNumber />}\r\n                />\r\n              </StepIndicator>\r\n            </Step>\r\n          ))}\r\n        </Stepper>\r\n        <Progress\r\n          value={progressPercent}\r\n          position=\"absolute\"\r\n          colorScheme=\"yellow\"\r\n          height=\"2px\"\r\n          width=\"full\"\r\n          top=\"10px\"\r\n          zIndex={-1}\r\n        />\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Stepperss;\r\n","import { useState } from \"react\"\n\nexport type UseStepsProps = {\n  index?: number\n  count?: number\n}\n\nexport type StepStatus = \"complete\" | \"active\" | \"incomplete\"\n\nexport function useSteps(props: UseStepsProps = {}) {\n  const { index = 0, count } = props\n\n  const [activeStep, setActiveStep] = useState(index)\n\n  const maxStep = typeof count === \"number\" ? count - 1 : 0\n  const activeStepPercent = activeStep / maxStep\n\n  return {\n    activeStep,\n    setActiveStep,\n    activeStepPercent,\n    isActiveStep(step: number) {\n      return step === activeStep\n    },\n    isCompleteStep(step: number) {\n      return step < activeStep\n    },\n    isIncompleteStep(step: number) {\n      return step > activeStep\n    },\n    getStatus(step: number): StepStatus {\n      if (step < activeStep) return \"complete\"\n      if (step > activeStep) return \"incomplete\"\n      return \"active\"\n    },\n    goToNext() {\n      setActiveStep((step) => {\n        return typeof count === \"number\" ? Math.min(count, step + 1) : step + 1\n      })\n    },\n    goToPrevious() {\n      setActiveStep((step) => Math.max(0, step - 1))\n    },\n  }\n}\n\nexport type UseStepsReturn = ReturnType<typeof useSteps>\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { categoryContext } from \"../Context/CategoryContextProvider\";\r\nimport { QuestionContext } from \"../Context/QuestionContextProvider\";\r\nimport { IoMdArrowRoundBack } from \"react-icons/io\";\r\nimport { NavLink, useNavigate } from \"react-router-dom\";\r\nimport Spinners from \"../Components/Spinner/Spinner\";\r\nimport CorrectAnimation from \"../Animation/Correct.json\";\r\nimport WrongAnimation from \"../Animation/Wrong.json\";\r\nimport Stepperss from \"../Components/Stepper/Stepperss\";\r\nimport toast, { Toaster } from \"react-hot-toast\";\r\nimport { ScoreContext } from \"../Context/ScoreContextProvider\";\r\nimport \"./Styles/QuizPage.css\";\r\nimport { FcInfo } from \"react-icons/fc\";\r\n\r\nconst QuizPage = () => {\r\n  const history = useNavigate();\r\n  const { user, Setcategory, SetcategoryValue } = useContext(categoryContext);\r\n  const { Questions } = useContext(QuestionContext);\r\n  const { SetMyScore } = useContext(ScoreContext);\r\n\r\n  const [Options, SetOptions] = useState();\r\n  const [CurrentQuestion, SetCurrentQuestion] = useState(0);\r\n  const [score, SetScore] = useState(0);\r\n  const [wrong, SetWrong] = useState(false);\r\n  const [right, SetRight] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (Questions.length > 1) {\r\n      SetOptions(\r\n        Questions &&\r\n          SuffleQuestions([\r\n            Questions[CurrentQuestion]?.correct_answer,\r\n            ...Questions[CurrentQuestion]?.incorrect_answers,\r\n          ])\r\n      );\r\n    } else {\r\n      toast.error(\"please try again\");\r\n      history(\"/quizsetting\");\r\n    }\r\n  }, [CurrentQuestion]);\r\n\r\n  const SuffleQuestions = (allOptions) => {\r\n    return allOptions.sort(() => Math.random() - 0.5);\r\n  };\r\n  const HandleAnswer = async (answer) => {\r\n    if (!answer) {\r\n      return toast.error(\"no answer selected\");\r\n    }\r\n    console.log(CurrentQuestion);\r\n    const rightAnswer = await Questions[CurrentQuestion]?.correct_answer;\r\n\r\n    if (answer === rightAnswer) {\r\n      SetRight(true);\r\n      setTimeout(() => {\r\n        SetRight(false);\r\n      }, 1000);\r\n      SetScore(score + 1);\r\n\r\n      if (CurrentQuestion < Questions?.length - 1) {\r\n        SetCurrentQuestion(CurrentQuestion + 1);\r\n      } else {\r\n        SetMyScore(score + 1);\r\n        history(\"/progress\");\r\n      }\r\n    } else {\r\n      SetWrong(true);\r\n      setTimeout(() => {\r\n        SetWrong(false);\r\n      }, 1000);\r\n      if (CurrentQuestion < Questions?.length - 1) {\r\n        SetCurrentQuestion(CurrentQuestion + 1);\r\n      } else {\r\n        SetMyScore(score);\r\n        history(\"/progress\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Toaster />\r\n      <div className=\"p-3\">\r\n        <div className=\"d-flex justify-content-between  gap-5   align-items-center\">\r\n          <div className=\"brainGames mb-4\">\r\n            <NavLink to=\"/\" className=\"text-reset text-decoration-none\">\r\n              <div className=\"d-flex justify-content-center align-items-center gap-1\">\r\n                <b>\r\n                  <b className=\"B fs-2\">B</b>\r\n                  rain\r\n                </b>\r\n\r\n                <b>\r\n                  <b className=\"G fs-2\">G</b>ames\r\n                </b>\r\n              </div>\r\n            </NavLink>\r\n          </div>\r\n\r\n          <div className=\"d-flex  justify-content-center align-items-center   \">\r\n            {Questions.length > 30 ? (\r\n              <></>\r\n            ) : (\r\n              <div>\r\n                <div className=\"  d-flex justify-content-center align-items-center flex-wrap py-2\">\r\n                  <div className=\"desktopStepper\">\r\n                    <Stepperss\r\n                      steps={Questions && Questions}\r\n                      index={CurrentQuestion}\r\n                      count={Questions?.length}\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"mobileStepper\">\r\n                  <div className=\" d-flex justify-content-center align-items-center flex-wrap  py-2 px-3\">\r\n                    {/*              \r\n                    <Progress\r\n                      hasStripe\r\n                      size=\"lg\"\r\n                      colorScheme=\"yellow\"\r\n                      value={Math.floor(\r\n                        (CurrentQuestion / Questions.length) * 100\r\n                      )}\r\n                      \r\n                    /> */}\r\n                    <Stepperss\r\n                      // oriented=\"vertical\"\r\n                      steps={Questions && Questions}\r\n                      index={CurrentQuestion}\r\n                      count={Questions?.length}\r\n                    />\r\n                    {/* <hr/> */}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"mobileStepper my-2\">\r\n          <div className=\"d-flex justify-content-center  px-2 align-items-center\">\r\n            <button className=\"button-33 \" role=\"button\" disabled>\r\n              <b className=\"fs-6\">{Questions[CurrentQuestion]?.category}</b>\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <div className=\"row p-2\">\r\n            <div className=\"col-4 mt-3 divider leftQuizPage\">\r\n              <div className=\"d-flex flex-column justify-content-center align-items-center gap-3\">\r\n                <button className=\"button-33 \" role=\"button\" disabled>\r\n                  <b className=\"fs-6\">\r\n                    Topic : {Questions[CurrentQuestion]?.category}\r\n                  </b>\r\n                </button>\r\n                {!right ? (\r\n                  <div>\r\n                    {!wrong ? (\r\n                      <>\r\n                        <div>\r\n                          <img style={{ height: \"200px\" }} src=\"QuizPage.svg\" />\r\n                        </div>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <Spinners\r\n                          height=\"200px\"\r\n                          animationData={WrongAnimation}\r\n                        />\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                ) : (\r\n                  <Spinners height=\"200px\" animationData={CorrectAnimation} />\r\n                )}\r\n                <h6 className=\"text-center\">\r\n                  Welcome,{\" \"}\r\n                  {user ? (\r\n                    <b className=\"vibrant \"> {user.toUpperCase()} </b>\r\n                  ) : (\r\n                    <b className=\"vibrant\">user</b>\r\n                  )}\r\n                </h6>\r\n                <button\r\n                  className=\"button-52\"\r\n                  onClick={() => {\r\n                    Setcategory(\"\");\r\n                    SetcategoryValue(null);\r\n\r\n                    history(\"/quizsetting\");\r\n                  }}\r\n                  role=\"button\"\r\n                >\r\n                  {\" \"}\r\n                  <div className=\"d-flex justify-content-center align-items-center gap-3\">\r\n                    <IoMdArrowRoundBack /> <b> Quit</b>\r\n                  </div>\r\n                </button>{\" \"}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col-lg-8 col-sm-12 col-md-12\">\r\n              <div className=\"d-flex questionBox justify-content-start \">\r\n                <div className=\"d-flex justify-content-center align-items-top gap-3 px-2 \">\r\n                  <h3>\r\n                    <b className=\"vibrant fs-3\">Q</b>\r\n                    {CurrentQuestion + 1}.\r\n                  </h3>\r\n                  <div>\r\n                    <h4> {Questions[CurrentQuestion]?.question}</h4>{\" \"}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"scoreBox d-flex justify-content-end align-items-center gap-2 px-5 py-3  mb-2\">\r\n                <div className=\"fs-4 d-flex justify-content-center align-items-center gap-3\">\r\n                  {\" \"}\r\n                  <div className=\"desktopScore\">\r\n                    <span>\r\n                      <b className=\"vibrantss \">S</b>core :{\" \"}\r\n                    </span>\r\n                    <span>\r\n                      {\" \"}\r\n                      <b>{score} </b>\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"mobileScore\">\r\n                <div className=\"d-flex justify-content-center py-3 flex-wrap\">\r\n                  <span>\r\n                    <b className=\"vibrant \">S</b>core :{\" \"}\r\n                  </span>\r\n                  <span>\r\n                    {\" \"}\r\n                    <b> {score} </b>\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <div className=\"mobileQuizPageAnimation mobileQuizPageAnimationSize my-3 \">\r\n                <div className=\"d-flex   justify-content-center px-5 py-1 \">\r\n                  {!right ? (\r\n                    <div>\r\n                      {!wrong ? (\r\n                        <>\r\n                          <div>\r\n                            <img\r\n                              className=\"mobileQuizPageAnimationSize\"\r\n                              src=\"QuizPage.svg\"\r\n                            />\r\n                          </div>\r\n                        </>\r\n                      ) : (\r\n                        <>\r\n                          <Spinners\r\n                            height=\"200px\"\r\n                            animationData={WrongAnimation}\r\n                          />\r\n                        </>\r\n                      )}\r\n                    </div>\r\n                  ) : (\r\n                    <Spinners height=\"200px\" animationData={CorrectAnimation} />\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\" px-4 optionBox d-flex flex-wrap justify-content-center gap-4 align-items-center  \">\r\n                {Options?.map((option, i) => {\r\n                  return (\r\n                    <div key={i} onClick={() => HandleAnswer(option)}>\r\n                      <button\r\n                        style={{\r\n                          cursor: \"pointer\",\r\n                          width: \"300px\",\r\n                          height: \"80px\",\r\n\r\n                          fontWeight: \"revert\",\r\n                        }}\r\n                        className=\"button-52\"\r\n                        role=\"button\"\r\n                      >\r\n                        <b>{option}</b>\r\n                      </button>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n\r\n              <div className=\"d-flex justify-content-start align-items-center gap-2 mt-5 px-4\">\r\n                <FcInfo className=\"fs-4\" />\r\n                <b>\r\n                  {\" \"}\r\n                  <b className=\"vibrant\"> Please, </b> click the appropriate\r\n                  response.\r\n                </b>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizPage;\r\n"],"names":["Box","chakra","displayName","Square","forwardRef","props","ref","size","centerContent","rest","styles","display","alignItems","justifyContent","jsx","boxSize","__css","flexShrink","flexGrow","borderRadius","StepContextProvider","useStepContext","createContext","name","StepperStylesProvider","useStepperStyles","createStylesContext","Stepper","useMultiStyleConfig","children","index","orientation","showLastSeparator","restProps","omitThemingProps","stepElements","Children","toArray","stepCount","length","div","stepper","className","cx","value","map","child","index2","status","step","count","isFirst","isLast","Step","dataAttr","StepIndicator","indicator","StepStatus","complete","incomplete","active","context","render","runIfFn","Fragment","CheckIcon","stroke","fill","strokeWidth","viewBox","height","width","fillRule","d","clipRule","StepIcon","icon","Icon","as","StepNumber","number","keyframes","strokeDasharray","strokeDashoffset","transform","progress","left","stripe","from","backgroundPosition","to","ProgressStylesProvider","useProgressStyles","errorMessage","ProgressFilledTrack","min","max","isIndeterminate","role","progress2","options","valueText","getValueText","percent","valueToPercent","bind","getAriaValueText","getProgressProps","trackStyles","filledTrack","style","concat","Progress","_a","hasStripe","isAnimated","propBorderRadius","ariaLabel","ariaLabelledBy","ariaValueText","title","track","stripeAnimation","animation","css","position","willChange","minWidth","overflow","jsxs","_ref","oriented","steps","activeStep","setActiveStep","arguments","undefined","useState","activeStepPercent","isActiveStep","isCompleteStep","isIncompleteStep","getStatus","goToNext","Math","goToPrevious","useSteps","useEffect","progressPercent","_jsx","_jsxs","colorScheme","gap","i","bg","top","zIndex","QuizPage","_Questions$CurrentQue4","_Questions$CurrentQue5","_Questions$CurrentQue6","history","useNavigate","user","Setcategory","SetcategoryValue","useContext","categoryContext","Questions","QuestionContext","SetMyScore","ScoreContext","Options","SetOptions","CurrentQuestion","SetCurrentQuestion","score","SetScore","wrong","SetWrong","right","SetRight","_Questions$CurrentQue","_Questions$CurrentQue2","SuffleQuestions","correct_answer","incorrect_answers","toast","error","allOptions","sort","random","Toaster","NavLink","_Fragment","Stepperss","disabled","category","Spinners","animationData","CorrectAnimation","WrongAnimation","src","toUpperCase","onClick","IoMdArrowRoundBack","question","option","async","_Questions$CurrentQue3","answer","console","log","setTimeout","HandleAnswer","cursor","fontWeight","FcInfo"],"sourceRoot":""}